// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get claimedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get burnedAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CurrentStrategyUpdated extends ethereum.Event {
  get params(): CurrentStrategyUpdated__Params {
    return new CurrentStrategyUpdated__Params(this);
  }
}

export class CurrentStrategyUpdated__Params {
  _event: CurrentStrategyUpdated;

  constructor(event: CurrentStrategyUpdated) {
    this._event = event;
  }

  get perBlockReward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startBlockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endBlockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeClaimed extends ethereum.Event {
  get params(): FeeClaimed__Params {
    return new FeeClaimed__Params(this);
  }
}

export class FeeClaimed__Params {
  _event: FeeClaimed;

  constructor(event: FeeClaimed) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Migrated extends ethereum.Event {
  get params(): Migrated__Params {
    return new Migrated__Params(this);
  }
}

export class Migrated__Params {
  _event: Migrated;

  constructor(event: Migrated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get omTokenV1StakeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakingPoolV1Reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stakingPoolV2Reward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MigratorInitialized extends ethereum.Event {
  get params(): MigratorInitialized__Params {
    return new MigratorInitialized__Params(this);
  }
}

export class MigratorInitialized__Params {
  _event: MigratorInitialized;

  constructor(event: MigratorInitialized) {
    this._event = event;
  }
}

export class MigratorUpdated extends ethereum.Event {
  get params(): MigratorUpdated__Params {
    return new MigratorUpdated__Params(this);
  }
}

export class MigratorUpdated__Params {
  _event: MigratorUpdated;

  constructor(event: MigratorUpdated) {
    this._event = event;
  }

  get migrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NextStrategyRemoved extends ethereum.Event {
  get params(): NextStrategyRemoved__Params {
    return new NextStrategyRemoved__Params(this);
  }
}

export class NextStrategyRemoved__Params {
  _event: NextStrategyRemoved;

  constructor(event: NextStrategyRemoved) {
    this._event = event;
  }
}

export class NextStrategyUpdated extends ethereum.Event {
  get params(): NextStrategyUpdated__Params {
    return new NextStrategyUpdated__Params(this);
  }
}

export class NextStrategyUpdated__Params {
  _event: NextStrategyUpdated;

  constructor(event: NextStrategyUpdated) {
    this._event = event;
  }

  get perBlockReward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startBlockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endBlockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnerNominated extends ethereum.Event {
  get params(): OwnerNominated__Params {
    return new OwnerNominated__Params(this);
  }
}

export class OwnerNominated__Params {
  _event: OwnerNominated;

  constructor(event: OwnerNominated) {
    this._event = event;
  }

  get nominatedOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolIncreased extends ethereum.Event {
  get params(): PoolIncreased__Params {
    return new PoolIncreased__Params(this);
  }
}

export class PoolIncreased__Params {
  _event: PoolIncreased;

  constructor(event: PoolIncreased) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get mantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get base(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get exponentiation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsUnlocked extends ethereum.Event {
  get params(): RewardsUnlocked__Params {
    return new RewardsUnlocked__Params(this);
  }
}

export class RewardsUnlocked__Params {
  _event: RewardsUnlocked;

  constructor(event: RewardsUnlocked) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mintedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get unstakedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get burnedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UnstakingTimeUpdated extends ethereum.Event {
  get params(): UnstakingTimeUpdated__Params {
    return new UnstakingTimeUpdated__Params(this);
  }
}

export class UnstakingTimeUpdated__Params {
  _event: UnstakingTimeUpdated;

  constructor(event: UnstakingTimeUpdated) {
    this._event = event;
  }

  get unstakingTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdrawed extends ethereum.Event {
  get params(): Withdrawed__Params {
    return new Withdrawed__Params(this);
  }
}

export class Withdrawed__Params {
  _event: Withdrawed;

  constructor(event: Withdrawed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__DEFAULT_PRICEResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__calculateUnstakeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__claimResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__currentStrategyResultValue0Struct extends ethereum.Tuple {
  get endBlockNumber(): BigInt {
    return this[0].toBigInt();
  }

  get perBlockReward(): BigInt {
    return this[1].toBigInt();
  }

  get startBlockNumber(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract__getUnlockedRewardsResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Contract__getUnstakeResultResultStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get applicableAt(): BigInt {
    return this[1].toBigInt();
  }
}

export class Contract__nextStrategyResultValue0Struct extends ethereum.Tuple {
  get endBlockNumber(): BigInt {
    return this[0].toBigInt();
  }

  get perBlockReward(): BigInt {
    return this[1].toBigInt();
  }

  get startBlockNumber(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract__priceResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__priceStoredResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__unstakeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  DEFAULT_PRICE(): Contract__DEFAULT_PRICEResult {
    let result = super.call(
      "DEFAULT_PRICE",
      "DEFAULT_PRICE():(uint256,uint256,uint256)",
      []
    );

    return new Contract__DEFAULT_PRICEResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_DEFAULT_PRICE(): ethereum.CallResult<Contract__DEFAULT_PRICEResult> {
    let result = super.tryCall(
      "DEFAULT_PRICE",
      "DEFAULT_PRICE():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__DEFAULT_PRICEResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  MIN_STAKE_BALANCE(): BigInt {
    let result = super.call(
      "MIN_STAKE_BALANCE",
      "MIN_STAKE_BALANCE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_STAKE_BALANCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_STAKE_BALANCE",
      "MIN_STAKE_BALANCE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  acceptOwnership(): boolean {
    let result = super.call("acceptOwnership", "acceptOwnership():(bool)", []);

    return result[0].toBoolean();
  }

  try_acceptOwnership(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "acceptOwnership",
      "acceptOwnership():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(amount: BigInt): boolean {
    let result = super.call("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_burn(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calculateUnstake(
    account: Address,
    amount: BigInt
  ): Contract__calculateUnstakeResult {
    let result = super.call(
      "calculateUnstake",
      "calculateUnstake(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new Contract__calculateUnstakeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculateUnstake(
    account: Address,
    amount: BigInt
  ): ethereum.CallResult<Contract__calculateUnstakeResult> {
    let result = super.tryCall(
      "calculateUnstake",
      "calculateUnstake(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__calculateUnstakeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  claim(amount: BigInt): Contract__claimResult {
    let result = super.call("claim", "claim(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return new Contract__claimResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claim(amount: BigInt): ethereum.CallResult<Contract__claimResult> {
    let result = super.tryCall("claim", "claim(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__claimResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  claimFees(): BigInt {
    let result = super.call("claimFees", "claimFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimFees", "claimFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimingFeePercent(): BigInt {
    let result = super.call(
      "claimingFeePercent",
      "claimingFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_claimingFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimingFeePercent",
      "claimingFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createNewStrategy(
    perBlockReward_: BigInt,
    startBlockNumber_: BigInt,
    duration_: BigInt
  ): boolean {
    let result = super.call(
      "createNewStrategy",
      "createNewStrategy(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(perBlockReward_),
        ethereum.Value.fromUnsignedBigInt(startBlockNumber_),
        ethereum.Value.fromUnsignedBigInt(duration_)
      ]
    );

    return result[0].toBoolean();
  }

  try_createNewStrategy(
    perBlockReward_: BigInt,
    startBlockNumber_: BigInt,
    duration_: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "createNewStrategy",
      "createNewStrategy(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(perBlockReward_),
        ethereum.Value.fromUnsignedBigInt(startBlockNumber_),
        ethereum.Value.fromUnsignedBigInt(duration_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentStrategy(): Contract__currentStrategyResultValue0Struct {
    let result = super.call(
      "currentStrategy",
      "currentStrategy():((uint256,uint256,uint256))",
      []
    );

    return result[0].toTuple() as Contract__currentStrategyResultValue0Struct;
  }

  try_currentStrategy(): ethereum.CallResult<
    Contract__currentStrategyResultValue0Struct
  > {
    let result = super.tryCall(
      "currentStrategy",
      "currentStrategy():((uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__currentStrategyResultValue0Struct
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feePool(): BigInt {
    let result = super.call("feePool", "feePool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feePool", "feePool():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentStrategyUnlockedRewards(): BigInt {
    let result = super.call(
      "getCurrentStrategyUnlockedRewards",
      "getCurrentStrategyUnlockedRewards():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentStrategyUnlockedRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentStrategyUnlockedRewards",
      "getCurrentStrategyUnlockedRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnlockedRewards(): Contract__getUnlockedRewardsResult {
    let result = super.call(
      "getUnlockedRewards",
      "getUnlockedRewards():(uint256,bool)",
      []
    );

    return new Contract__getUnlockedRewardsResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getUnlockedRewards(): ethereum.CallResult<
    Contract__getUnlockedRewardsResult
  > {
    let result = super.tryCall(
      "getUnlockedRewards",
      "getUnlockedRewards():(uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getUnlockedRewardsResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  getUnstake(account: Address): Contract__getUnstakeResultResultStruct {
    let result = super.call(
      "getUnstake",
      "getUnstake(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toTuple() as Contract__getUnstakeResultResultStruct;
  }

  try_getUnstake(
    account: Address
  ): ethereum.CallResult<Contract__getUnstakeResultResultStruct> {
    let result = super.tryCall(
      "getUnstake",
      "getUnstake(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__getUnstakeResultResultStruct
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increasePool(amount: BigInt): boolean {
    let result = super.call("increasePool", "increasePool(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_increasePool(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("increasePool", "increasePool(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initializeMigrator(): boolean {
    let result = super.call(
      "initializeMigrator",
      "initializeMigrator():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_initializeMigrator(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "initializeMigrator",
      "initializeMigrator():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUpdateBlockNumber(): BigInt {
    let result = super.call(
      "lastUpdateBlockNumber",
      "lastUpdateBlockNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastUpdateBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateBlockNumber",
      "lastUpdateBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedRewards(): BigInt {
    let result = super.call("lockedRewards", "lockedRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockedRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedRewards",
      "lockedRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  migrator(): Address {
    let result = super.call("migrator", "migrator():(address)", []);

    return result[0].toAddress();
  }

  try_migrator(): ethereum.CallResult<Address> {
    let result = super.tryCall("migrator", "migrator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  migratorInitialized(): boolean {
    let result = super.call(
      "migratorInitialized",
      "migratorInitialized():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_migratorInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "migratorInitialized",
      "migratorInitialized():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(account: Address, amount: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_mint(account: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextStrategy(): Contract__nextStrategyResultValue0Struct {
    let result = super.call(
      "nextStrategy",
      "nextStrategy():((uint256,uint256,uint256))",
      []
    );

    return result[0].toTuple() as Contract__nextStrategyResultValue0Struct;
  }

  try_nextStrategy(): ethereum.CallResult<
    Contract__nextStrategyResultValue0Struct
  > {
    let result = super.tryCall(
      "nextStrategy",
      "nextStrategy():((uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__nextStrategyResultValue0Struct
    );
  }

  nominateNewOwner(owner_: Address): boolean {
    let result = super.call(
      "nominateNewOwner",
      "nominateNewOwner(address):(bool)",
      [ethereum.Value.fromAddress(owner_)]
    );

    return result[0].toBoolean();
  }

  try_nominateNewOwner(owner_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nominateNewOwner",
      "nominateNewOwner(address):(bool)",
      [ethereum.Value.fromAddress(owner_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nominatedOwner(): Address {
    let result = super.call("nominatedOwner", "nominatedOwner():(address)", []);

    return result[0].toAddress();
  }

  try_nominatedOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nominatedOwner",
      "nominatedOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): Contract__priceResult {
    let result = super.call("price", "price():(uint256,uint256,uint256)", []);

    return new Contract__priceResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_price(): ethereum.CallResult<Contract__priceResult> {
    let result = super.tryCall(
      "price",
      "price():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__priceResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  priceStored(): Contract__priceStoredResult {
    let result = super.call(
      "priceStored",
      "priceStored():(uint256,uint256,uint256)",
      []
    );

    return new Contract__priceStoredResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_priceStored(): ethereum.CallResult<Contract__priceStoredResult> {
    let result = super.tryCall(
      "priceStored",
      "priceStored():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__priceStoredResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  setMigrator(migrator_: Address): boolean {
    let result = super.call("setMigrator", "setMigrator(address):(bool)", [
      ethereum.Value.fromAddress(migrator_)
    ]);

    return result[0].toBoolean();
  }

  try_setMigrator(migrator_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("setMigrator", "setMigrator(address):(bool)", [
      ethereum.Value.fromAddress(migrator_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setUnstakingTime(unstakingTime_: BigInt): boolean {
    let result = super.call(
      "setUnstakingTime",
      "setUnstakingTime(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(unstakingTime_)]
    );

    return result[0].toBoolean();
  }

  try_setUnstakingTime(unstakingTime_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setUnstakingTime",
      "setUnstakingTime(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(unstakingTime_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stake(amount: BigInt): BigInt {
    let result = super.call("stake", "stake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_stake(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stake", "stake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeForUser(account: Address, amount: BigInt): BigInt {
    let result = super.call(
      "stakeForUser",
      "stakeForUser(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_stakeForUser(
    account: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeForUser",
      "stakeForUser(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnstaked(): BigInt {
    let result = super.call("totalUnstaked", "totalUnstaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalUnstaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnstaked",
      "totalUnstaked():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unlockRewards(amount: BigInt): boolean {
    let result = super.call("unlockRewards", "unlockRewards(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_unlockRewards(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "unlockRewards",
      "unlockRewards(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unstake(amount: BigInt): Contract__unstakeResult {
    let result = super.call("unstake", "unstake(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return new Contract__unstakeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_unstake(amount: BigInt): ethereum.CallResult<Contract__unstakeResult> {
    let result = super.tryCall(
      "unstake",
      "unstake(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__unstakeResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  unstakeLocked(amount: BigInt): BigInt {
    let result = super.call(
      "unstakeLocked",
      "unstakeLocked(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_unstakeLocked(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeLocked",
      "unstakeLocked(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakingTime(): BigInt {
    let result = super.call("unstakingTime", "unstakingTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unstakingTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakingTime",
      "unstakingTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  update(): boolean {
    let result = super.call("update", "update():(bool)", []);

    return result[0].toBoolean();
  }

  try_update(): ethereum.CallResult<boolean> {
    let result = super.tryCall("update", "update():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(): boolean {
    let result = super.call("withdraw", "withdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_withdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get syntheticTokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get syntheticTokenSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get stakingToken_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get owner_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get claimingFeePercent_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get perBlockReward_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get startBlockNumber_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get duration_(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get unstakingTime_(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get defaultPriceMantissa(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get claimedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get burnedAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateNewStrategyCall extends ethereum.Call {
  get inputs(): CreateNewStrategyCall__Inputs {
    return new CreateNewStrategyCall__Inputs(this);
  }

  get outputs(): CreateNewStrategyCall__Outputs {
    return new CreateNewStrategyCall__Outputs(this);
  }
}

export class CreateNewStrategyCall__Inputs {
  _call: CreateNewStrategyCall;

  constructor(call: CreateNewStrategyCall) {
    this._call = call;
  }

  get perBlockReward_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get startBlockNumber_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get duration_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateNewStrategyCall__Outputs {
  _call: CreateNewStrategyCall;

  constructor(call: CreateNewStrategyCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreasePoolCall extends ethereum.Call {
  get inputs(): IncreasePoolCall__Inputs {
    return new IncreasePoolCall__Inputs(this);
  }

  get outputs(): IncreasePoolCall__Outputs {
    return new IncreasePoolCall__Outputs(this);
  }
}

export class IncreasePoolCall__Inputs {
  _call: IncreasePoolCall;

  constructor(call: IncreasePoolCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncreasePoolCall__Outputs {
  _call: IncreasePoolCall;

  constructor(call: IncreasePoolCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeMigratorCall extends ethereum.Call {
  get inputs(): InitializeMigratorCall__Inputs {
    return new InitializeMigratorCall__Inputs(this);
  }

  get outputs(): InitializeMigratorCall__Outputs {
    return new InitializeMigratorCall__Outputs(this);
  }
}

export class InitializeMigratorCall__Inputs {
  _call: InitializeMigratorCall;

  constructor(call: InitializeMigratorCall) {
    this._call = call;
  }
}

export class InitializeMigratorCall__Outputs {
  _call: InitializeMigratorCall;

  constructor(call: InitializeMigratorCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class NominateNewOwnerCall extends ethereum.Call {
  get inputs(): NominateNewOwnerCall__Inputs {
    return new NominateNewOwnerCall__Inputs(this);
  }

  get outputs(): NominateNewOwnerCall__Outputs {
    return new NominateNewOwnerCall__Outputs(this);
  }
}

export class NominateNewOwnerCall__Inputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NominateNewOwnerCall__Outputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMigratorCall extends ethereum.Call {
  get inputs(): SetMigratorCall__Inputs {
    return new SetMigratorCall__Inputs(this);
  }

  get outputs(): SetMigratorCall__Outputs {
    return new SetMigratorCall__Outputs(this);
  }
}

export class SetMigratorCall__Inputs {
  _call: SetMigratorCall;

  constructor(call: SetMigratorCall) {
    this._call = call;
  }

  get migrator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMigratorCall__Outputs {
  _call: SetMigratorCall;

  constructor(call: SetMigratorCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetUnstakingTimeCall extends ethereum.Call {
  get inputs(): SetUnstakingTimeCall__Inputs {
    return new SetUnstakingTimeCall__Inputs(this);
  }

  get outputs(): SetUnstakingTimeCall__Outputs {
    return new SetUnstakingTimeCall__Outputs(this);
  }
}

export class SetUnstakingTimeCall__Inputs {
  _call: SetUnstakingTimeCall;

  constructor(call: SetUnstakingTimeCall) {
    this._call = call;
  }

  get unstakingTime_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUnstakingTimeCall__Outputs {
  _call: SetUnstakingTimeCall;

  constructor(call: SetUnstakingTimeCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get mintedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StakeForUserCall extends ethereum.Call {
  get inputs(): StakeForUserCall__Inputs {
    return new StakeForUserCall__Inputs(this);
  }

  get outputs(): StakeForUserCall__Outputs {
    return new StakeForUserCall__Outputs(this);
  }
}

export class StakeForUserCall__Inputs {
  _call: StakeForUserCall;

  constructor(call: StakeForUserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeForUserCall__Outputs {
  _call: StakeForUserCall;

  constructor(call: StakeForUserCall) {
    this._call = call;
  }

  get mintedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnlockRewardsCall extends ethereum.Call {
  get inputs(): UnlockRewardsCall__Inputs {
    return new UnlockRewardsCall__Inputs(this);
  }

  get outputs(): UnlockRewardsCall__Outputs {
    return new UnlockRewardsCall__Outputs(this);
  }
}

export class UnlockRewardsCall__Inputs {
  _call: UnlockRewardsCall;

  constructor(call: UnlockRewardsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockRewardsCall__Outputs {
  _call: UnlockRewardsCall;

  constructor(call: UnlockRewardsCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get unstakedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get burnedAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UnstakeLockedCall extends ethereum.Call {
  get inputs(): UnstakeLockedCall__Inputs {
    return new UnstakeLockedCall__Inputs(this);
  }

  get outputs(): UnstakeLockedCall__Outputs {
    return new UnstakeLockedCall__Outputs(this);
  }
}

export class UnstakeLockedCall__Inputs {
  _call: UnstakeLockedCall;

  constructor(call: UnstakeLockedCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeLockedCall__Outputs {
  _call: UnstakeLockedCall;

  constructor(call: UnstakeLockedCall) {
    this._call = call;
  }

  get synthToBurn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
